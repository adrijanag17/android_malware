from xml.dom.minidom import parseString
import pandas as pd
import os
import numpy as np

# sets to store all unique actions, permissions, and metadata for column headers
actions = set()
permissions = set()
metadata = set()

# all app names for indexing
app_names = []

# three dataframes with actions, permissions and metadata as features resp.
action_df = pd.DataFrame()
perm_df = pd.DataFrame()
metadata_df = pd.DataFrame()


'''parses manifest files of each app and adds all actions, permissions and metadata to their resp. set'''
def parse_manifest(app_type_dir, app_dir):

    manifest_path = f"./{app_type_dir}/{app_dir}/AndroidManifest.xml"

    if not os.path.isfile(manifest_path):
        print(f"No AndroidManifest file in {app_dir}")
        return None

    # add name of app to list app_names
    app_names.append(app_dir)

    with open(manifest_path, 'r') as file:
        data = file.read()

    dom = parseString(data)

    # get nodes corresponding to each tag and for each node get all 'android:name' attributes
    action_nodes = dom.getElementsByTagName('action')
    perm_nodes = dom.getElementsByTagName('uses-permission')
    metadata_nodes = dom.getElementsByTagName('meta-data')

    for node in action_nodes:
        if node.getAttribute('android:name'):
            actions.add(node.getAttribute('android:name'))

    for node in perm_nodes:
        if node.getAttribute('android:name'):
            permissions.add(node.getAttribute('android:name').strip('android.permissions.'))

    for node in metadata_nodes:
        if node.getAttribute('android:name'):
            metadata.add(node.getAttribute('android:name'))


'''creates an empty dataframe with column headers and indices as passed'''
def create_empty_df(col):

    df = pd.DataFrame(columns=col, index=app_names)
    
    # insert columns app_name and malicious (target column) to the front
    df.insert(0, 'app_name', '')
    df.insert(1, 'malicious', np.NaN)

    return df

'''fills dataframe row by row'''
def fill_df(tag, df, app_type, app_name):

    # used for filling target column (malicious) - 1: malicious, 0: not malicious (benign)
    mal = 1 if app_type == 'malware' else 0

    manifest_path = f"./{app_type}/{app_name}/AndroidManifest.xml"

    if not os.path.isfile(manifest_path):
        return None

    # fill columns app_name and malicious for this row (this particular app)
    df.at[app_name, 'app_name'] = app_name
    df.at[app_name, 'malicious'] = mal

    with open(manifest_path, 'r') as file:
        data = file.read()

    dom = parseString(data)

    nodes = dom.getElementsByTagName(f'{tag}')

    # fill 1 if feature present in app
    for node in nodes:
        if node.getAttribute('android:name'):
            if tag == 'uses-permission':
                df.at[app_name, (node.getAttribute('android:name').strip('android:permissions.'))] = 1
            else:
                df.at[app_name, node.getAttribute('android:name')] = 1


def main():

    benign_app_dirs = os.listdir('./benign')
    malware_app_dirs = os.listdir('./malware')
    
    for app in benign_app_dirs:
        parse_manifest('benign', app)

    for app in malware_app_dirs:
        parse_manifest('malware', app)

    # creating empty dataframes
    action_df = create_empty_df(list(actions))
    perm_df = create_empty_df(list(permissions))
    metadata_df = create_empty_df(list(metadata))

    # filling dataframes
    for app in benign_app_dirs:
        fill_df('action', action_df, 'benign', app)
        fill_df('uses-permission', perm_df, 'benign', app)
        fill_df('meta-data', metadata_df, 'benign', app)

    for app in malware_app_dirs:
        fill_df('action', action_df, 'malware', app)
        fill_df('uses-permission', perm_df, 'malware', app)
        fill_df('meta-data', metadata_df, 'malware', app)

    # saving dataframes to csv files
    perm_df.to_csv('permissions.csv', index=False)
    action_df.to_csv('actions.csv', index=False)
    metadata_df.to_csv('metadata.csv', index=False)


if __name__ == '__main__':
    main()

    